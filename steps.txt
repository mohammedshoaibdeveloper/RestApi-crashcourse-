Step 1:

create celery.py in project directory

Step 2:

paste this code to celery file

import os

from celery import Celery

# Set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')

app = Celery('proj')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related configuration keys
#   should have a `CELERY_` prefix.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django apps.
app.autodiscover_tasks()


@app.task(bind=True)
def debug_task(self):
    print(f'Request: {self.request!r}')

Step3 :

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'projectname.settings')

app = Celery('projectname')

Step4:

add in __init__ file:

from .celery import app as celery_app

__all__ = ('celery_app',)

Ste5:

pip install redis
pip install celery

step 6:

open terminal and run redis-cli

step 7:

add in settings file:

CELERY_BROKER_URL = 'redis://127.0.0.1:6379'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'

Step 8:

create task.py file in app:

add into this:

from celery import shared_task
from time import sleep



@shared_task
def sleepy(duration):
    sleep(duration)
    return None


Step 9:

run this command:

celery -A projectname worker --loglevel=info

Step 10:

add in views:

from .task import *

def myindex(request):
    sleep(10)
    return HttpResponse("<h1>Hello ,</h1>")

Step 11:

add in urls.py

 path('myindex/',myindex),


Step12:

add celery task:

sleepy.delay(30)

Step 13:

add to task.py:

from django.core.mail import send_mail
from django.conf import settings
from decouple import config

@shared_task
def send_mail_task():

    send_mail("CELERY WORKED YEAH!",
        "CELERY IS COOL",
        config('EMAIL_HOST_USER'),
        ['shoaibbilal101@gmail.com'],
        fail_silently = False
    )
    return None


call into api:

send_mail_task.delay()